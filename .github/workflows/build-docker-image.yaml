name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'
  push:
    branches:
      - main
    paths-ignore:
      - '**/LICENSE'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/LICENSE'
      - '**/*.md'

env:
  DOCKER-CONTEXT: ./
  DOCKER-FILE: ./Dockerfile
  DOCKER-IMAGE: trainee 

jobs:
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        tag: [humble, jazzy]

    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Cache Directories
        run: |
          mkdir -p ${{ github.workspace }}/cache/install/
          mkdir -p ${{ github.workspace }}/cache/build/
          mkdir -p ${{ github.workspace }}/cache/log/

      - name: Restore Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/cache/install.tar.gz
            ${{ github.workspace }}/cache/build.tar.gz
            ${{ github.workspace }}/cache/log.tar.gz
          key: build-artifacts-${{ matrix.tag }}-${{ hashFiles('cache/**/*.tar.gz') }}
          restore-keys: |
            build-artifacts-${{ matrix.tag }}-

      - name: Extract Cache Build Artifacts
        run: |
          mkdir -p ${{ github.workspace }}/cache/install/
          mkdir -p ${{ github.workspace }}/cache/build/
          mkdir -p ${{ github.workspace }}/cache/log/

          if [ -f "${{ github.workspace }}/cache/install.tar.gz" ]; then
            tar -xzf ${{ github.workspace }}/cache/install.tar.gz -C ${{ github.workspace }}/cache/
          fi

          if [ -f "${{ github.workspace }}/cache/build.tar.gz" ]; then
            tar -xzf ${{ github.workspace }}/cache/build.tar.gz -C ${{ github.workspace }}/cache/
          fi

          if [ -f "${{ github.workspace }}/cache/log.tar.gz" ]; then
            tar -xzf ${{ github.workspace }}/cache/log.tar.gz -C ${{ github.workspace }}/cache/
          fi

          echo "=== RESTORED INSTALL ==="
          ls -la ${{ github.workspace }}/cache/install/
          echo "=== RESTORED BUILD ==="
          ls -la ${{ github.workspace }}/cache/build/
          echo "=== RESTORED LOG ==="
          ls -la ${{ github.workspace }}/cache/log/
      - name: Debug
        if: ${{ always() }}
        uses: mxschmitt/action-tmate@v3

      - name: Set up Docker image tag
        run: echo "DOCKER_IMAGE_TAG=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/${{ env.DOCKER-IMAGE }}:${{ matrix.tag }}" >> $GITHUB_ENV

      - name: Set Cache Path
        run: echo "CACHE_PATH=cache" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}
          file: ${{ env.DOCKER-FILE }}
          tags: ${{ env.DOCKER_IMAGE_TAG }}
          build-args: |
            USERNAME=runner
            ROS_DISTRO=${{ matrix.tag }}
            CACHE_PATH=${{ env.CACHE_PATH }}
          ssh: default=${{ env.SSH_AUTH_SOCK }}
          no-cache: true
          push: false
          load: true

      - name: Create Container
        id: container
        run: |
          CONTAINER_ID=$(docker create ${{ env.DOCKER_IMAGE_TAG }})
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV

      - name: Compress in Container
        run: |
          docker exec $CONTAINER_ID bash -c "\
            tar -czf /tmp/install.tar.gz -C /home/runner/trainee install && \
            tar -czf /tmp/build.tar.gz -C /home/runner/trainee build && \
            tar -czf /tmp/log.tar.gz -C /home/runner/trainee log"

      - name: Copy Compressed Files from Container
        run: |
          docker cp $CONTAINER_ID:/tmp/install.tar.gz ${{ github.workspace }}/cache/install.tar.gz
          docker cp $CONTAINER_ID:/tmp/build.tar.gz ${{ github.workspace }}/cache/build.tar.gz
          docker cp $CONTAINER_ID:/tmp/log.tar.gz ${{ github.workspace }}/cache/log.tar.gz

      - name: Save Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/cache/install.tar.gz
            ${{ github.workspace }}/cache/build.tar.gz
            ${{ github.workspace }}/cache/log.tar.gz
          key: build-artifacts-${{ matrix.tag }}-${{ hashFiles('cache/**/*.tar.gz') }}
          restore-keys: |
            build-artifacts-${{ matrix.tag }}-
